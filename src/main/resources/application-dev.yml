spring:
  datasource:
    #如果存在多个数据源，监控的时候可以通过名字来区分开来
    name: mysql
    #连接数据库的url
    url: jdbc:mysql://127.0.0.1:3306/basic-end?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
    # 连接数据库的账号
    username: root
    #  连接数据库的密码
    password: 123456
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    # 扩展插件
    # 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall
    filters: stat
    # 最大连接池数量
    maxActive: 20
    # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    initialSize: 1
    # 获取连接时最大等待时间，单位毫秒
    maxWait: 60000
    # 最小连接池数量
    minIdle: 1
    timeBetweenEvictionRunsMillis: 60000
    # 连接保持空闲而不被驱逐的最长时间
    minEvictableIdleTimeMillis: 300000
    # 用来检测连接是否有效的sql，要求是一个查询语句
    # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
    validationQuery: select count(1) from 'table'
    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
    testWhileIdle: true
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnBorrow: false
    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnReturn: false
    # 是否缓存preparedStatement，即PSCache
    poolPreparedStatements: false
    # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
    maxOpenPreparedStatements: -1

#日志文件配置
resources:
  # log文件写入地址
  logdir: logs/
  # 应用名称
  appname: spring-boot-example
  # 日志打印的基础扫描包
  basepackage: com.spring.demo.springbootexample


#redis配置
redis:
  # redis数据库索引（默认为0），我们使用索引为3的数据库，避免和其他数据库冲突
  database: 0
  # redis服务器地址（默认为localhost）
  host: 127.0.0.1
  # redis端口（默认为6379）
  port: 6379
  # redis访问密码（默认为空)
  password: 123456
  # redis连接超时时间（单位为毫秒）
  timeout: 3000
  # redis连接池配置
  pool: 1
  # 最大可用连接数（默认为8，负数表示无限）
  max-active: 8
  # 最大空闲连接数（默认为8，负数表示无限）
  max-idle: 8
  # 最小空闲连接数（默认为0，该值只有为正数才有作用）
  min-idle: 0
  # 从连接池中获取连接最大等待时间（默认为-1，单位为毫秒，负数表示无限）
  max-wait: -1